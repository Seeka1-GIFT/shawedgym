import React, { useState, useEffect } from 'react';
// Removed dummy imports to ensure DB-only data
import { apiService, authHelpers } from '../services/api.js';
import { useToast } from '../contexts/ToastContext.jsx';
import ErrorBoundary from '../components/ErrorBoundary.jsx';
import LoadingSpinner from '../components/LoadingSpinner.jsx';
import { 
  Users, Plus, Search, Filter, Download, Mail, Phone, 
  Calendar, CreditCard, AlertTriangle, CheckCircle, 
  Clock, Edit, Trash2, Eye, UserPlus, Star, MapPin,
  Activity, TrendingUp, Award, X, Save
} from 'lucide-react';

// Add Member Form Component
const AddMemberForm = ({ onClose, onMemberAdded, planOptions }) => {
  const { showSuccess, showError } = useToast();
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    membershipType: 'basic',
    planId: '',
    dateOfBirth: '',
    address: '',
    emergencyContact: '',
    emergencyPhone: '',
    registrationFee: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleChange = (e) => {
    const { name, value } = e.target;
    // If selecting a plan, also set membershipType from plan name as fallback
    if (name === 'planId') {
      const selected = (planOptions || []).find(p => String(p.id) === String(value));
      setFormData(prev => ({ ...prev, planId: value, membershipType: (selected?.name || prev.membershipType || 'basic').toLowerCase() }));
      return;
    }
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      if (!formData.firstName || !formData.lastName || !formData.phone) {
        setError('Please fill in all required fields');
        showError('Please fill in all required fields');
        setLoading(false);
        return;
      }

      // Normalize optional fields per requirements
      const normalized = {
        ...formData,
        email: (formData.email || '').trim() || null, // allow null/empty
        registrationFee: Number(formData.registrationFee) || 0, // default 0
        address: (formData.address || '').trim() || null // allow null
      };

      await onMemberAdded(normalized);
      showSuccess('Member created successfully!');
    } catch (error) {
      const errorMessage = error.message || 'Failed to create member';
      setError(errorMessage);
      showError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {error && (
        <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
          <p className="text-red-700 text-sm">{error}</p>
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Member ID</label>
          <input type="text" value="Auto-generated by DB" disabled
            className="w-full px-3 py-2 border border-gray-200 dark:border-gray-600 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-500 dark:text-gray-300" />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">First Name *</label>
          <input type="text" name="firstName" value={formData.firstName} onChange={handleChange}
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" required />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Last Name *</label>
          <input type="text" name="lastName" value={formData.lastName} onChange={handleChange}
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" required />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Email</label>
          <input type="email" name="email" value={formData.email} onChange={handleChange}
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Phone *</label>
          <input type="tel" name="phone" value={formData.phone} onChange={handleChange} placeholder="+252-61-123-4567"
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" required />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Membership Type *</label>
          <select name="planId" value={formData.planId} onChange={handleChange}
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" required>
            <option value="">Select a plan</option>
            {(planOptions || []).map(plan => (
              <option key={plan.id} value={plan.id}>{plan.name} - ${Number(plan.price || 0)}</option>
            ))}
          </select>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Date of Registration</label>
          <input type="date" name="dateOfBirth" value={formData.dateOfBirth} onChange={handleChange}
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Registration Fee ($)</label>
          <input type="number" min="0" step="1" name="registrationFee" value={formData.registrationFee} onChange={handleChange}
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" placeholder="e.g. 10" />
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Address</label>
        <textarea name="address" value={formData.address} onChange={handleChange} rows="2"
          className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
          placeholder="Enter full address" />
      </div>

      <div className="flex items-center justify-end space-x-3 pt-4">
        <button type="button" onClick={onClose} disabled={loading}
          className="px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 rounded-lg transition-colors">
          Cancel
        </button>
        <button type="submit" disabled={loading}
          className="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors disabled:opacity-50 flex items-center space-x-2">
          <Save className="w-4 h-4" />
          <span>{loading ? 'Creating...' : 'Create Member'}</span>
        </button>
      </div>
    </form>
  );
};

const Members = () => {
  const { showSuccess, showError } = useToast();
  const currentUser = authHelpers.getUser();
  const isAdmin = currentUser?.role === 'admin';
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const [showAddModal, setShowAddModal] = useState(false);
  const [editingMember, setEditingMember] = useState(null);
  const [deletingMember, setDeletingMember] = useState(null);
  // Keep track of which member rows are expanded (details visible)
  const [expandedMemberIds, setExpandedMemberIds] = useState(new Set());
  const [members, setMembers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [planOptions, setPlanOptions] = useState([]);

  // Load members from API
  useEffect(() => {
    const loadMembers = async () => {
      try {
        setLoading(true);
        const response = await apiService.getMembers({ search: searchTerm });
        setMembers(response.data.members || []);
        setError(null);
      } catch (error) {
        console.error('Failed to load members:', error);
        const errorMessage = error.message || 'Failed to load members';
        setError(errorMessage);
        showError(errorMessage);
        setMembers([]);
      } finally {
        setLoading(false);
      }
    };
    const loadPlans = async () => {
      try {
        const res = await apiService.getPlans();
        const plans = Array.isArray(res?.data) ? res.data : res?.data?.plans || [];
        setPlanOptions(plans);
      } catch (e) {
        console.error('Failed to load plans:', e);
        setPlanOptions([]);
      }
    };
    loadMembers();
    loadPlans();
  }, [searchTerm, showError]);

  // Enhanced member data
  const enhancedMembers = members.map(member => ({
    ...member,
    name: `${member.first_name || ''} ${member.last_name || ''}`.trim(),
    photo: `https://images.unsplash.com/photo-${member.id % 2 === 0 ? '1507003211169-0a1dd7228f2d' : '1494790108755-2616b612b47c'}?w=150&h=150&fit=crop&crop=face`,
    membershipType: member.membership_type || 'Standard',
    address: member.address || 'Mogadishu, Somalia'
  }));

  // Filter members
  const filteredMembers = enhancedMembers.filter((m) => {
    const fullName = `${m.first_name || ''} ${m.last_name || ''}`.toLowerCase();
    const email = (m.email || '').toLowerCase();
    const phone = m.phone || '';
    const searchLower = (searchTerm || '').toLowerCase();
    
    const matchesSearch = fullName.includes(searchLower) || email.includes(searchLower) || phone.includes(searchTerm);
    const matchesStatus = filterStatus === 'all' || (m.status && m.status.toLowerCase() === filterStatus.toLowerCase());
    return matchesSearch && matchesStatus;
  });

  // CRUD Functions
  const handleAddMember = async (memberData) => {
    if (!isAdmin) {
      showError('Only administrators can create members');
       return;
    }
    try {
      const response = await apiService.createMember(memberData);
      if (response.success) {
        const refreshResponse = await apiService.getMembers();
        setMembers(refreshResponse.data.members || []);
        setShowAddModal(false);
        showSuccess('Member added successfully!');
      }
    } catch (error) {
      console.error('Failed to add member:', error);
      showError(error.message || 'Failed to add member');
      throw error; // Re-throw to be handled by the form
    }
  };

  const handleDeleteMember = async (memberId) => {
    if (!isAdmin) {
      showError('Only administrators can delete members');
      return;
    }
    try {
      const response = await apiService.deleteMember(memberId);
      if (response.success) {
        // quick refetch to stay in sync with backend
        const refreshResponse = await apiService.getMembers({ search: searchTerm });
        setMembers(refreshResponse.data.members || []);
        setDeletingMember(null);
        showSuccess('Member deleted successfully!');
      }
    } catch (error) {
      console.error('Failed to delete member:', error);
      showError(error.message || 'Failed to delete member');
    }
  };

  const handleUpdateMember = async (e) => {
    e.preventDefault();
    if (!isAdmin) {
      showError('Only administrators can update members');
      return;
    }
    try {
      const form = e.currentTarget;
      const data = new FormData(form);
      const payload = {
        firstName: data.get('firstName') || editingMember.first_name,
        lastName: data.get('lastName') || editingMember.last_name,
        email: data.get('email') || editingMember.email,
        phone: data.get('phone') || editingMember.phone,
        membershipType: data.get('membershipType') || editingMember.membership_type,
        dateOfBirth: data.get('dateOfBirth') || editingMember.date_of_birth,
        address: data.get('address') || editingMember.address,
        emergencyContact: data.get('emergencyContact') || editingMember.emergency_contact,
        emergencyPhone: data.get('emergencyPhone') || editingMember.emergency_phone,
        status: data.get('status') || editingMember.status
      };
      await apiService.updateMember(editingMember.id, payload);
      const refreshResponse = await apiService.getMembers({ search: searchTerm });
      setMembers(refreshResponse.data.members || []);
      setEditingMember(null);
      showSuccess('Member updated successfully!');
    } catch (err) {
      console.error('Failed to update member:', err);
      showError(err.message || 'Failed to update member');
    }
  };

  const stats = {
    total: enhancedMembers.length,
    active: enhancedMembers.filter(m => m.status === 'Active').length,
    expiringSoon: 3,
    newThisMonth: 3
  };

  const toggleExpand = (memberId) => {
    setExpandedMemberIds(prev => {
      const next = new Set(prev);
      if (next.has(memberId)) {
        next.delete(memberId);
      } else {
        next.add(memberId);
      }
      return next;
    });
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 p-6 flex items-center justify-center">
        <LoadingSpinner size="xl" text="Loading members..." />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 p-6">
      <ErrorBoundary 
        error={error ? { message: error } : null} 
        onRetry={() => window.location.reload()}
        onDismiss={() => setError(null)}
      >
      
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-4xl font-extrabold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">Members</h1>
            <p className="text-sm text-gray-600 dark:text-gray-400">Manage gym members and track memberships</p>
          </div>
          {isAdmin && (
            <button
              onClick={() => setShowAddModal(true)}
              className="flex items-center space-x-2 px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-lg shadow-lg transition-all duration-300 transform hover:scale-105"
            >
              <Plus className="w-4 h-4" />
              <span>Add Member</span>
            </button>
          )}
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
        {[
          { label: 'Total Members', value: stats.total, color: 'from-blue-500 to-cyan-500' },
          { label: 'Active', value: stats.active, color: 'from-green-500 to-emerald-500' },
          { label: 'Expiring Soon', value: stats.expiringSoon, color: 'from-orange-500 to-red-500' },
          { label: 'New This Month', value: stats.newThisMonth, color: 'from-purple-500 to-pink-500' }
        ].map((card) => (
          <div key={card.label} className={`bg-white dark:bg-gray-800 p-4 rounded-xl shadow-md border border-gray-100 dark:border-gray-700`}> 
            <div className={`inline-flex px-2 py-1 text-xs text-white rounded-full bg-gradient-to-r ${card.color}`}>{card.label}</div>
            <div className="mt-2 text-3xl font-extrabold text-gray-900 dark:text-white">{card.value}</div>
          </div>
        ))}
      </div>

      {/* Search and Filters */}
      <div className="flex items-center space-x-4 mb-6">
        <div className="flex-1 relative">
          <Search className="w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <input
                type="text"
                placeholder="Search members..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white shadow-sm"
              />
            </div>
              <select
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
          className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-800 dark:text-white"
              >
                <option value="all">All Status</option>
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
              </select>
            </div>

      {/* Members List - vertical (compact) */}
      <div className="grid grid-cols-1 gap-3">
        {filteredMembers.map((member) => (
          <div key={member.id} className="bg-white dark:bg-gray-800 rounded-xl shadow-md hover:shadow-lg transition-all p-4">
            <div className="flex items-center space-x-3 mb-2">
              {/* Avatar without image - initials only */}
              <div className="w-10 h-10 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 text-white flex items-center justify-center text-sm font-semibold shadow">
                {(() => {
                  const name = member.name || `${member.first_name || ''} ${member.last_name || ''}`.trim();
                  const initials = name
                    .split(' ')
                    .filter(Boolean)
                    .slice(0, 2)
                    .map(n => n[0]?.toUpperCase())
                    .join('');
                  return initials || 'M';
                })()}
              </div>
              <div>
                <h3 className="text-base font-semibold text-gray-900 dark:text-white">{member.name}</h3>
                <p className="text-xs text-gray-600 dark:text-gray-400">{member.membershipType}</p>
                <p className="text-[11px] text-gray-500 dark:text-gray-400">ID: {member.id}</p>
              </div>
            </div>

            {/* Collapsible content */}
            {expandedMemberIds.has(member.id) && (
            <div className="space-y-1 text-xs">
              <div className="flex justify-between">
                <span className="text-gray-600 dark:text-gray-400">Email:</span>
                <span className="text-gray-900 dark:text-white truncate">{member.email}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600 dark:text-gray-400">Phone:</span>
                <span className="text-gray-900 dark:text-white">{member.phone}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600 dark:text-gray-400">Status:</span>
                <span className={`px-1.5 py-0.5 rounded text-[11px] ${member.status === 'Active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                  {member.status}
                </span>
            </div>
          </div>
            )}
            
            <div className="flex items-center justify-end gap-2 mt-3 pt-3 border-t border-gray-200 dark:border-gray-700">
              <button onClick={() => toggleExpand(member.id)}
                className="px-3 py-1 text-xs bg-blue-600 hover:bg-blue-700 text-white rounded-md shadow">
                <Eye className={`w-4 h-4 ${expandedMemberIds.has(member.id) ? 'opacity-100' : 'opacity-90'}`} />
            </button>
              <button onClick={() => setEditingMember(member)}
                className="px-3 py-1 text-xs bg-gray-600 hover:bg-gray-700 text-white rounded-md shadow">
                <Edit className="w-4 h-4" />
            </button>
              <button onClick={() => setDeletingMember(member)}
                className="px-3 py-1 text-xs bg-red-600 hover:bg-red-700 text-white rounded-md shadow">
                <Trash2 className="w-4 h-4" />
            </button>
          </div>
        </div>
        ))}
      </div>


      {filteredMembers.length === 0 && (
        <div className="text-center py-12">
          <Users className="w-16 h-16 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">No members found</h3>
          <p className="text-gray-500 dark:text-gray-400">Try adjusting your search criteria</p>
        </div>
      )}

      {/* Add Member Modal */}
      {showAddModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
                <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-gray-900 dark:text-white">Add New Member</h2>
                <button onClick={() => setShowAddModal(false)}
                  className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors">
                  <X className="w-6 h-6 text-gray-500" />
                </button>
              </div>
              <AddMemberForm onClose={() => setShowAddModal(false)} onMemberAdded={handleAddMember} planOptions={planOptions} />
                      </div>
                    </div>
                  </div>
      )}

      {/* Delete Confirmation Modal */}
      {deletingMember && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl w-full max-w-md">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Delete Member</h3>
                <button onClick={() => setDeletingMember(null)}
                  className="p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded">
                  <X className="w-5 h-5 text-gray-500" />
                </button>
              </div>
              <p className="text-gray-600 dark:text-gray-400 mb-6">
                Are you sure you want to delete {deletingMember.name}? This action cannot be undone.
              </p>
              <div className="flex items-center justify-end space-x-3">
                <button onClick={() => setDeletingMember(null)}
                  className="px-4 py-2 text-gray-700 bg-gray-200 hover:bg-gray-300 rounded-lg transition-colors">
                  Cancel
                </button>
                <button onClick={() => handleDeleteMember(deletingMember.id)}
                  className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors">
                  Delete
                </button>
                    </div>
                    </div>
                    </div>
                    </div>
      )}

      {/* Edit Member Modal */}
      {editingMember && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-gray-900 dark:text-white">Edit Member</h2>
                <button onClick={() => setEditingMember(null)}
                  className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors">
                  <X className="w-6 h-6 text-gray-500" />
                </button>
                    </div>
              <form onSubmit={handleUpdateMember} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">First Name</label>
                    <input name="firstName" defaultValue={editingMember.first_name}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Last Name</label>
                    <input name="lastName" defaultValue={editingMember.last_name}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" />
                    </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Email</label>
                    <input type="email" name="email" defaultValue={editingMember.email}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" />
                    </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Phone</label>
                    <input name="phone" defaultValue={editingMember.phone}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Membership Type</label>
                    <select name="membershipType" defaultValue={editingMember.membership_type || 'basic'}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white">
                      <option value="basic">Basic</option>
                      <option value="premium">Premium</option>
                      <option value="vip">VIP</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Status</label>
                    <select name="status" defaultValue={editingMember.status || 'Active'}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white">
                      <option value="Active">Active</option>
                      <option value="Inactive">Inactive</option>
                    </select>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Address</label>
                  <textarea name="address" defaultValue={editingMember.address} rows="2"
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" />
              </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Emergency Contact</label>
                    <input name="emergencyContact" defaultValue={editingMember.emergency_contact}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" />
        </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Emergency Phone</label>
                    <input name="emergencyPhone" defaultValue={editingMember.emergency_phone}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" />
                          </div>
                        </div>
                <div className="flex items-center justify-end space-x-3 pt-4">
                  <button type="button" onClick={() => setEditingMember(null)}
                    className="px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 rounded-lg transition-colors">Cancel</button>
                  <button type="submit"
                    className="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">Update Member</button>
                        </div>
              </form>
                        </div>
          </div>
        </div>
      )}
      </ErrorBoundary>
    </div>
  );
};

export default Members;
